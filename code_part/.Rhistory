"helloworld"
5+5
for(x in 1:10){
print(x)
}
paste("hello! ", name)
print("hello world")
print("hello world")
print(5+5)
for(x in 1:10){
print(x)
}
name <- "John Smith"
paste("hello! ", name)
print(x, y, z)
x <- y <- z <- 5
x
y
z
nums <- list(1, 2, 6, 4, 5)
for(num in nums){
print(num)
}
nums <- list(1, 2, 6, 4, 5)
for(num in nums){
print(num)
}
helloworld <- function(){
print("helloworld")
}
print("helloworld")
helloworld()
helloname(name)
helloname <-function(name){
paste("hello", name)
}
helloname(name)
factorial <- function(n){
if(n==0){
return(1)
}
return(n*factorial(n-1))
}
factorial(8)
library(readxl)
patients101 <- read_excel("C:/Users/ranxi/UCDavis/U_Winter_2024/STA032/discussion/discussion2/patients101.xlsx")
library(readxl)
patients101 <- read_excel("C:/Users/ranxi/UCDavis/U_Winter_2024/STA032/discussion/discussion2/patients101.csv")
patients101 <- read.csv("C:/Users/ranxi/UCDavis/U_Winter_2024/STA032/discussion/discussion2/patients101.csv")
View(patients101)
hist(patients101)
log(10, 2)
log(10)
log(2.718)
log(2.71828)
setwd("C:/Users/ranxi/UCDavis/U_Winter_2024/STA032/group_project/code_part")
#load the data
chip_dataset <- read.csv("chip_dataset.csv")
chip_dataset <- chip_dataset[,-1]
print(chip_dataset)
# Convert the release date
for(i in 1:nrow(chip_dataset)) {
# Check if 'Na' is in the 'Release Date' column
if(grepl("NaT", chip_dataset$`Release.Date`[i])) {
# Replace with NA
chip_dataset$`Release.Date`[i] <- NA
} else {
# Extract year, month, and day, then calculate new value
date_split <- unlist(strsplit(chip_dataset$`Release.Date`[i], "/"))
month <- as.numeric(date_split[1]) /12
day <- as.numeric(date_split[2]) /365
year <- as.numeric(date_split[3]) -2000
chip_dataset$`Release.Date`[i] <- year + month + day
}
}
chip_dataset$`Release.Date` <- as.numeric(chip_dataset$`Release.Date`)
print(chip_dataset)
grouped <- split(chip_dataset, chip_dataset$Type)
CPU <- grouped$CPU
CPU <- CPU[, !(names(CPU) %in% c('FP16.GFLOPS', 'FP32.GFLOPS', 'FP64.GFLOPS'))]
numerical_columns<- sapply(CPU, is.numeric)
# Verify that "Vendor" is a column name in CPU
print(numerical_columns)
'Vendor' %in% names(CPU)
vendor_column <- CPU$Vendor
numerical_CPU <- CPU[, numerical_columns]
print(numerical_CPU)
# install the package ggally if not available
if (!require("GGally")) install.packages("GGally")
#extract process_size and frequency from CPU
process_size=numerical_CPU$Process.Size..nm.
frequency_size=numerical_CPU$Freq..MHz.
# Assuming 'process_size' is your vector containing Process Size (nm) data
mean_process_size <- mean(process_size, na.rm = TRUE)
std_error_process_size <- sd(process_size, na.rm = TRUE) / sqrt(length(na.omit(process_size)))
conf_interval_process_size <- mean_process_size + c(-1, 1) * qt(0.975, length(na.omit(process_size)) - 1) * std_error_process_size
mean_frequency_size <- mean(frequency_size, na.rm = TRUE)
std_error_process_size <- sd(frequency_size, na.rm = TRUE) / sqrt(length(na.omit(frequency_size)))
conf_interval_process_size <- mean_frequency_size + c(-1, 1) * qt(0.975, length(na.omit(frequency_size)) - 1) * std_error_frequency_size
frequency_size=numerical_CPU$Freq..MHz.
# Assuming 'process_size' is your vector containing Process Size (nm) data
mean_process_size <- mean(process_size, na.rm = TRUE)
std_error_process_size <- sd(process_size, na.rm = TRUE) / sqrt(length(na.omit(process_size)))
conf_interval_process_size <- mean_process_size + c(-1, 1) * qt(0.975, length(na.omit(process_size)) - 1) * std_error_process_size
mean_frequency_size <- mean(frequency_size, na.rm = TRUE)
std_error_process_size <- sd(frequency_size, na.rm = TRUE) / sqrt(length(na.omit(frequency_size)))
conf_interval_process_size <- mean_frequency_size + c(-1, 1) * qt(0.975, length(na.omit(frequency_size)) - 1) * std_error_frequency_size
#load the data
chip_dataset <- read.csv("chip_dataset.csv")
chip_dataset <- chip_dataset[,-1]
print(chip_dataset)
# Convert the release date
for(i in 1:nrow(chip_dataset)) {
# Check if 'Na' is in the 'Release Date' column
if(grepl("NaT", chip_dataset$`Release.Date`[i])) {
# Replace with NA
chip_dataset$`Release.Date`[i] <- NA
} else {
# Extract year, month, and day, then calculate new value
date_split <- unlist(strsplit(chip_dataset$`Release.Date`[i], "/"))
month <- as.numeric(date_split[1]) /12
day <- as.numeric(date_split[2]) /365
year <- as.numeric(date_split[3]) -2000
chip_dataset$`Release.Date`[i] <- year + month + day
}
}
chip_dataset$`Release.Date` <- as.numeric(chip_dataset$`Release.Date`)
print(chip_dataset)
grouped <- split(chip_dataset, chip_dataset$Type)
CPU <- grouped$CPU
CPU <- CPU[, !(names(CPU) %in% c('FP16.GFLOPS', 'FP32.GFLOPS', 'FP64.GFLOPS'))]
numerical_columns<- sapply(CPU, is.numeric)
# Verify that "Vendor" is a column name in CPU
print(numerical_columns)
'Vendor' %in% names(CPU)
vendor_column <- CPU$Vendor
numerical_CPU <- CPU[, numerical_columns]
print(numerical_CPU)
# install the package ggally if not available
if (!require("GGally")) install.packages("GGally")
library(GGally)
ggpairs(numerical_CPU,aes(color = vendor_column), cardinality_threshold = 10000)
#extract process_size and frequency from CPU
process_size=numerical_CPU$Process.Size..nm.
frequency_size=numerical_CPU$Freq..MHz.
# Assuming 'process_size' is your vector containing Process Size (nm) data
mean_process_size <- mean(process_size, na.rm = TRUE)
std_error_process_size <- sd(process_size, na.rm = TRUE) / sqrt(length(na.omit(process_size)))
conf_interval_process_size <- mean_process_size + c(-1, 1) * qt(0.975, length(na.omit(process_size)) - 1) * std_error_process_size
mean_frequency_size <- mean(frequency_size, na.rm = TRUE)
std_error_frequency_size <- sd(frequency_size, na.rm = TRUE) / sqrt(length(na.omit(frequency_size)))
conf_interval_frequency_size <- mean_frequency_size + c(-1, 1) * qt(0.975, length(na.omit(frequency_size)) - 1) * std_error_frequency_size
fit <- lm(Freq..MHz. ~ Process.Size..nm., data = chip_data)
fit <- lm(Freq..MHz. ~ Process.Size..nm., data = chip_dataset)
summary(fit)
print("the configence of process size is", conf_interval_process_size)
#load the data
chip_dataset <- read.csv("chip_dataset.csv")
chip_dataset <- chip_dataset[,-1]
print(chip_dataset)
# Convert the release date
for(i in 1:nrow(chip_dataset)) {
# Check if 'Na' is in the 'Release Date' column
if(grepl("NaT", chip_dataset$`Release.Date`[i])) {
# Replace with NA
chip_dataset$`Release.Date`[i] <- NA
} else {
# Extract year, month, and day, then calculate new value
date_split <- unlist(strsplit(chip_dataset$`Release.Date`[i], "/"))
month <- as.numeric(date_split[1]) /12
day <- as.numeric(date_split[2]) /365
year <- as.numeric(date_split[3]) -2000
chip_dataset$`Release.Date`[i] <- year + month + day
}
}
chip_dataset$`Release.Date` <- as.numeric(chip_dataset$`Release.Date`)
print(chip_dataset)
grouped <- split(chip_dataset, chip_dataset$Type)
CPU <- grouped$CPU
CPU <- CPU[, !(names(CPU) %in% c('FP16.GFLOPS', 'FP32.GFLOPS', 'FP64.GFLOPS'))]
numerical_columns<- sapply(CPU, is.numeric)
# Verify that "Vendor" is a column name in CPU
print(numerical_columns)
'Vendor' %in% names(CPU)
vendor_column <- CPU$Vendor
numerical_CPU <- CPU[, numerical_columns]
print(numerical_CPU)
# install the package ggally if not available
if (!require("GGally")) install.packages("GGally")
library(GGally)
# Create a pair plot
#plot between TDP and process_size
plot_data <- numerical_CPU[, c('TDP..W.', 'Process.Size..nm.')]
ggpairs(plot_data)
#load the data
chip_dataset <- read.csv("chip_dataset.csv")
chip_dataset <- chip_dataset[,-1]
print(chip_dataset)
# Convert the release date
for(i in 1:nrow(chip_dataset)) {
# Check if 'Na' is in the 'Release Date' column
if(grepl("NaT", chip_dataset$`Release.Date`[i])) {
# Replace with NA
chip_dataset$`Release.Date`[i] <- NA
} else {
# Extract year, month, and day, then calculate new value
date_split <- unlist(strsplit(chip_dataset$`Release.Date`[i], "/"))
month <- as.numeric(date_split[1]) /12
day <- as.numeric(date_split[2]) /365
year <- as.numeric(date_split[3]) -2000
chip_dataset$`Release.Date`[i] <- year + month + day
}
}
chip_dataset$`Release.Date` <- as.numeric(chip_dataset$`Release.Date`)
print(chip_dataset)
grouped <- split(chip_dataset, chip_dataset$Type)
CPU <- grouped$CPU
CPU <- CPU[, !(names(CPU) %in% c('FP16.GFLOPS', 'FP32.GFLOPS', 'FP64.GFLOPS'))]
numerical_columns<- sapply(CPU, is.numeric)
# Verify that "Vendor" is a column name in CPU
print(numerical_columns)
'Vendor' %in% names(CPU)
vendor_column <- CPU$Vendor
numerical_CPU <- CPU[, numerical_columns]
print(numerical_CPU)
# install the package ggally if not available
if (!require("GGally")) install.packages("GGally")
library(GGally)
# Create a pair plot
#plot between TDP and process_size
plot_data <- numerical_CPU[, c('TDP..W.', 'Process.Size..nm.')]
ggpairs(plot_data, mapping = aes(color = vendor_column))
ggpairs(plot_data, mapping = aes(color = vendor_column))
#plot between TDP and release_date
plot_data <- numerical_CPU[, c('TDP..W.', 'Release.Date')]
ggpairs(plot_data, mapping = aes(color = vendor_column))
#plot between process_size and release_date
plot_data <- numerical_CPU[, c('Process.Size..nm.', 'Release.Date')]
ggpairs(plot_data, mapping = aes(color = vendor_column))
#----calculate confidence interval-------
alpha <- 0.05  # 95% confidence interval
#extract process_size from CPU
process_size=numerical_CPU$Process.Size..nm.
mean_process_size <- mean(process_size, na.rm = TRUE)
# Compute standard error
process_std_error <- sd(process_size, na.rm = TRUE) / sqrt(length(na.omit(process_size)))
process_size_t_value <- qt(1 - alpha/2, df = length(na.omit(process_size)) - 1)
conf_interval_process_size <- c(mean_process_size - process_size_t_value * process_std_error, mean_process_size + process_size_t_value * process_std_error)
print("the configence of process size is", conf_interval_process_size)
print(conf_interval_process_size)
#calculate the frequency confidence interval
#extract frequency from CPU
frequency_size=numerical_CPU$Freq..MHz.
mean_frequency_size <- mean(frequency_size, na.rm = TRUE)
std_error_frequency_size <- sd(frequency_size, na.rm = TRUE) / sqrt(length(na.omit(frequency_size)))
print(conf_interval_frequency_size)
process_size=numerical_CPU$Process.Size..nm.
mean_frequency_size <- mean(process_size, na.rm = TRUE)
std_error_frequency_size <- sd(process_size, na.rm = TRUE) / sqrt(length(na.omit(process_size)))
conf_interval_process_size <- mean_process_size
print(conf_interval_process_size)
process_size=numerical_CPU$Process.Size..nm.
mean_frequency_size <- mean(process_size, na.rm = TRUE)
std_error_frequency_size <- sd(process_size, na.rm = TRUE) / sqrt(length(na.omit(process_size)))
conf_interval_process_size <- mean_process_size + c(-1, 1) * qt(0.975, length(na.omit(process_size)) - 1) * std_error_process_size
print(conf_interval_process_size)
#fit the data
fit <- lm(Freq..MHz. ~ Process.Size..nm., data = chip_dataset)
summary(fit)
